import { Bot, Context } from 'grammy';
import schedule from 'node-schedule';
import User from '../models/user';
import UserSettings from '../models/userSettings';
import { getTasksForUser } from './taskService';
import { formatTaskList } from '../utils/taskFormatter';
import logger from '../utils/logger';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const activeJobs = new Map<string, schedule.Job>();

export const setupNotifications = (bot: Bot<Context>) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const sendNotification = async (userId: number, time: string) => {
    try {
      const tasks = await getTasksForUser(userId);
      if (tasks.length === 0) return;

      const message = `üïí ${time}\n\n${formatTaskList(tasks)}`;
      await bot.api.sendMessage(userId, message);
      logger.info(`Notification sent to user ${userId} at ${time}`);
    } catch (error) {
      logger.error(`Error sending notification to user ${userId}:`, error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  const createScheduleJob = (userId: number, time: string, timezone: string) => {
    const [hours, minutes] = time.split(':');
    const rule = new schedule.RecurrenceRule();
    rule.hour = parseInt(hours);
    rule.minute = parseInt(minutes);
    rule.tz = timezone;

    const jobKey = `${userId}_${time}`;

    // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (activeJobs.has(jobKey)) {
      activeJobs.get(jobKey)?.cancel();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    const job = schedule.scheduleJob(rule, () => sendNotification(userId, time));
    activeJobs.set(jobKey, job);

    logger.info(`Scheduled notification for user ${userId} at ${time} (${timezone})`);
  };

  // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const scheduleUserNotifications = async () => {
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    activeJobs.forEach((job) => job.cancel());
    activeJobs.clear();

    const users = await User.findAll({
      include: [UserSettings],
    });

    users.forEach((user) => {
      const settings = user.UserSettings;
      if (!settings) return;

      try {
        const times = JSON.parse(settings.notificationTimes);
        times.forEach((time: string) => {
          createScheduleJob(user.id, time, settings.timezone);
        });
      } catch (error) {
        logger.error(`Error parsing notification times for user ${user.id}:`, error);
      }
    });
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  scheduleUserNotifications().catch((error) => {
    logger.error('Error setting up notifications:', error);
  });

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è —É—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
  schedule.scheduleJob('0 * * * *', () => {
    logger.info('Refreshing notification schedules');
    scheduleUserNotifications().catch((error) => {
      logger.error('Error refreshing notifications:', error);
    });
  });
};

// –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUserNotifications = async (bot: Bot<Context>, userId: number) => {
  try {
    const user = await User.findOne({
      where: { id: userId },
      include: [UserSettings],
    });

    if (!user?.UserSettings) {
      logger.warn(`No settings found for user ${userId}`);
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activeJobs.forEach((job, key) => {
      if (key.startsWith(`${userId}_`)) {
        job.cancel();
        activeJobs.delete(key);
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    const times = JSON.parse(user.UserSettings.notificationTimes);
    times.forEach((time: string) => {
      const [hours, minutes] = time.split(':');
      const rule = new schedule.RecurrenceRule();
      rule.hour = parseInt(hours);
      rule.minute = parseInt(minutes);
      rule.tz = user.UserSettings.timezone;

      const jobKey = `${userId}_${time}`;
      const job = schedule.scheduleJob(rule, () => sendNotification(userId, time));
      activeJobs.set(jobKey, job);
    });

    logger.info(`Updated notification schedule for user ${userId}`);
  } catch (error) {
    logger.error(`Error updating notifications for user ${userId}:`, error);
  }
};
